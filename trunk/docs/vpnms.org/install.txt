======= Установка VPNMS. =======
Для установки нам понадобится **FreeBSD 7.X** и выше. Я тестировал на совместимость с **FreeBSD 7.2** и **FreeBSD 8.0**, с другими, более новыми версиями, проблем тоже быть не должно. В данной документации я буду все делать на примере **FreeBSD 8.0**.




===== Подготовка системы =====

Итак, имеем свежеустановленную систему:

<code>
# uname -a
FreeBSD  8.0-RELEASE FreeBSD 8.0-RELEASE #0: Sat Nov 21 15:02:08 UTC 2009     root@mason.cse.buffalo.edu:/usr/obj/usr/src/sys/GENERIC  amd64
</code>

Для начала нам нужно подготовить систему.
  * Сконфигурируем сетевую подситему. В простейшем случае два сетевых интерфейса: один(**em0**) смотрит во внутреннюю сеть, второй(**em1**) в мир. Также нужно разрешить нашему серверу работать в качестве шлюза (опция **gateway_enable**), задать имя хоста и прописать наш(и) dns в /etc/resolv.conf (файл надо создать, если его нет). На данный момент файл /etc/rc.conf будет выглядеть примерно так:
<code>
gateway_enable="YES"
hostname="vpn.domain.org"
ifconfig_em0="inet 10.0.15.3  netmask 255.255.0.0"
ifconfig_em1="inet 192.168.168.10  netmask 255.255.255.0"
defaultrouter="192.168.168.1"

keymap="ru.koi8-r"
sshd_enable="YES"
</code>
И файл /etc/resolv.conf:
<code>
nameserver 192.168.168.1
</code>
<note>Понятное дело, IP-адреса и маски надо вписать свои</note>
Пока на сервер не будет связи с миром, дальше не продолжаем.

  * Обновляем систему (не обязательно, но желательно)

<code>freebsd-update fetch install</code>

  * Качаем порты, т.к. все ставить будем из них. Но не вижу припятствий, если Вы захотите все поставить из пакетов.
<code>portsnap fetch extract</code>

  * Установить вспомогательное ПО (ваш любимый редактор, коммандную оболочку, файловый менеджер). На этом пункте я останавливаться не буду, после завершения двигаемся дальше.

  * К этому моменту у нас уже полностью сконфигурирована система и готова к работе. Приступаем к сборке мира из сорцов. Это небоходимо для влючения модуля **ALTQ** для **PF**. Этот пункт можно пропустить и использовать ядро **GENERIC**, если Вам не нужен шейпер(ограничение пропускной способности канала, проще говоря, если вы не планируете ограничивать пользователей по скорости интернета).
Для начала проверяем, есть ли у нас исходные коды ядра в каталоге /usr/src, если каталог пуст - устанавливаем с диска:
<code>
# mount /cdrom
# cd /cdrom/8.0-RELEASE/src/
# ./install.sh all
</code>
Обновляем ихсодники с помощью **cvsup**. Создаем cvsup-файл /root/sys-supfile:
<code>
*default host=cvsup5.ru.freebsd.org
*default base=/var/db
*default prefix=/usr
*default release=cvs tag=RELENG_8_0
*default delete use-rel-suffix
*default compress

src-all
</code>
<note>
Для сборки ядра необходимо наличие всех исходных файлов FreeBSD.
</note>
Вместо **cvsup5.ru.freebsd.org** можете прописать другое зеркало. Далее выполняем команду **csup /root/sys-supfile**, должно получится что-то вроде:
<code>
# csup /root/sys-supfile 
Connected to 212.5.64.42
Updating collection src-sys/cvs
 Edit src/sys/cddl/compat/opensolaris/sys/vnode.h
 Edit src/sys/cddl/contrib/opensolaris/uts/common/fs/zfs/zfs_replay.c
<----вырезано---->
Updating collection src-base/cvs
 Edit src/UPDATING
Finished successfully
</code>

Исходники ядра у нас теперь есть, перед сборкой неплохо бы было сохранить старое ядро на случай, если новое не запустится после неудачной сборки.
<code># cp -Rp /boot/kernel /boot/kernel.good</code>
Далее создаем новый конфигурационный файл ядра. Копируем стандартный конфигурационный файл ядра **GENERIC** вашей архитектуры(в моем случае amd64).
<code>cp /sys/amd64/conf/GENERIC /sys/amd64/conf/MYKERNEL</code>
Редактируем файл **MYKERNEL** по своему усмотрению, если нужно. Главное, что нам от него нужно - добавить следующие строки:
<code>
#ALTQ
device pf
device pflog
device pfsync
options         ALTQ
options         ALTQ_CBQ        # Class Bases Queuing (CBQ)
options         ALTQ_RED        # Random Early Detection (RED)
options         ALTQ_RIO        # RED In/Out
options         ALTQ_HFSC       # Hierarchical Packet Scheduler (HFSC)
options         ALTQ_PRIQ       # Priority Queuing (PRIQ)
options         ALTQ_NOPCC      # Required for SMP build
</code>
Собираем ядро.
<code>
# cd /usr/src
# make buildkernel KERNCONF=MYKERNEL
# make installkernel KERNCONF=MYKERNEL
</code>
Если в конфиге нет ошибок, начнется сборка нового ядра, в зависимости от скорости процессора вашего сервера, это может занять час и более. После того, как ядро установилось - перезагружаемся и если все прошло успешно, загрузится новое ядро:
<code>
# uname -a
FreeBSD vpn.domain.org 8.0-STABLE FreeBSD 8.0-STABLE #0: Thu Mar  4 16:20:24 NOVT 2010     root@vpn.domain.org:/usr/obj/usr/src/sys/MYKERNEL  amd64
</code>












===== Установка базового софта=====

Установим весь сопутствующий софт, который понадобится для работы: **Apache, PHP, MySQL**. **Apache** нужен для отображения интерфейса управления, на **PHP** написан сам интерфейс, в базе данных **MySQL** хранятся пользоватлеи и логируется трафик.
Начнем с индейца, в конфигураторе настраиваете все по своему усмотрению, никаких особых требования нет:
<code>
# cd /usr/ports/www/apache22
# make config
# make configure
# make
# make install
</code>

Устанавливаем **MySQL**:
<code>
# cd /usr/ports/databases/mysql51-server
# make configure
# make
# make install
</code>

Если все прошло успешно, устанавливаем **PHP**, в конфигураторе выбираем //"Build Apache module"//:
<code>
# cd /usr/ports/lang/php5
# make config
┌────────────────────────────────────────────────────────────────────┐
│                     Options for php5 5.2.12                        │  
│ ┌────────────────────────────────────────────────────────────────┐ │  
│ │[X] CLI        Build CLI version                                │ │  
│ │[X] CGI        Build CGI version                                │ │  
│ │[X] APACHE     Build Apache module                              │ │  
│ │[ ] DEBUG      Enable debug                                     │ │  
│ │[X] SUHOSIN    Enable Suhosin protection system (not for jails) │ │  
│ │[ ] MULTIBYTE  Enable zend multibyte support                    │ │  
│ │[ ] IPV6       Enable ipv6 support                              │ │  
│ │[ ] MAILHEAD   Enable mail header patch                         │ │  
│ │[ ] REDIRECT   Enable force-cgi-redirect support (CGI only)     │ │  
│ │[ ] DISCARD    Enable discard-path support (CGI only)           │ │  
│ │[X] FASTCGI    Enable fastcgi support (CGI only)                │ │  
│ │[X] PATHINFO   Enable path-info-check support (CGI only)        │ │  
│ │                                                                │ │  
│ │                                                                │ │  
│ │                                                                │ │  
├─└────────────────────────────────────────────────────────────────┘─┤  
│                       [  OK  ]       Cancel                        │  
└────────────────────────────────────────────────────────────────────┘
# make configure
# make
# make install
</code>
Устанавливаем дополнения для **PHP**, обязательно нужно ставить **CURL** и **MYSQL**, остальное по желанию:
<code>
# cd /usr/ports/lang/php5-extensions
# make config
┌────────────────────────────────────────────────────────────────────┐
│                 Options for php5-extensions 1.3                    │  
│ ┌────────────────────────────────────────────────────────────────┐ │  
│ │   [ ] BCMATH      bc style precision math functions            │ │  
│ │   [ ] BZ2         bzip2 library support                        │ │  
│ │   [ ] CALENDAR    calendar conversion support                  │ │  
│ │   [X] CTYPE       ctype functions                              │ │  
│ │   [X] CURL        CURL support                                 │ │  
│ │   [ ] DBA         dba support                                  │ │  
│ │   [ ] DBASE       dBase library support                        │ │  
│ │   [X] DOM         DOM support                                  │ │  
│ │   [ ] EXIF        EXIF support                                 │ │  
│ │   [ ] FILEINFO    fileinfo support                             │ │  
│ │   [X] FILTER      input filter support                         │ │  
│ │   [ ] FRIBIDI     FriBidi support                              │ │  
│ │   [ ] FTP         FTP support                                  │ │  
│ │   [ ] GD          GD library support                           │ │  
│ │   [ ] GETTEXT     gettext library support                      │ │  
│ │   [X] HASH        HASH Message Digest Framework                │ │  
│ │   [X] ICONV       iconv support                                │ │  
│ │   [ ] IMAP        IMAP support                                 │ │  
│ │   [ ] INTERBASE   Interbase 6 database support (Firebird)      │ │  
│ │   [X] JSON        JavaScript Object Serialization support      │ │  
│ │   [ ] LDAP        OpenLDAP support                             │ │  
│ │   [ ] MBSTRING    multibyte string support                     │ │  
│ │   [ ] MCRYPT      Encryption support                           │ │  
│ │   [ ] MHASH       Crypto-hashing support                       │ │  
│ │   [ ] MING        ming shockwave flash support                 │ │  
│ │   [ ] MSSQL       MS-SQL database support                      │ │  
│ │   [X] MYSQL       MySQL database support                       │ │  
│ │   [ ] MYSQLI      MySQLi database support                      │ │  
│ │   [ ] NCURSES     ncurses support (CLI only)                   │ │  
│ │   [ ] ODBC        unixODBC support                             │ │
│ │   [ ] OPENSSL     OpenSSL support                              │ │  
│ │   [ ] PCNTL       pcntl support (CLI only)                     │ │  
│ │   [X] PCRE        Perl Compatible Regular Expression support   │ │  
│ │   [ ] PDF         PDFlib support (implies GD)                  │ │  
│ │   [X] PDO         PHP Data Objects Interface (PDO)             │ │  
│ │   [X] PDO_SQLITE  PDO sqlite driver                            │ │  
│ │   [ ] PGSQL       PostgreSQL database support                  │ │  
│ │   [X] POSIX       POSIX-like functions                         │ │  
│ │   [ ] PSPELL      pspell support                               │ │  
│ │   [ ] READLINE    readline support (CLI only)                  │ │  
│ │   [ ] RECODE      recode support                               │ │  
│ │   [X] SESSION     session support                              │ │  
│ │   [ ] SHMOP       shmop support                                │ │  
│ │   [X] SIMPLEXML   simplexml support                            │ │  
│ │   [ ] SNMP        SNMP support                                 │ │
│ │   [ ] SOAP        SOAP support                                 │ │  
│ │   [ ] SOCKETS     sockets support                              │ │  
│ │   [X] SPL         Standard PHP Library                         │ │  
│ │   [X] SQLITE      sqlite support                               │ │  
│ │   [ ] SYBASE_CT   Sybase database support                      │ │  
│ │   [ ] SYSVMSG     System V message support                     │ │  
│ │   [ ] SYSVSEM     System V semaphore support                   │ │  
│ │   [ ] SYSVSHM     System V shared memory support               │ │  
│ │   [ ] TIDY        TIDY support                                 │ │  
│ │   [X] TOKENIZER   tokenizer support                            │ │  
│ │   [ ] WDDX        WDDX support (implies XML)                   │ │  
│ │   [X] XML         XML support                                  │ │  
│ │   [X] XMLREADER   XMLReader support                            │ │  
│ │   [ ] XMLRPC      XMLRPC-EPI support                           │ │  
│ │   [X] XMLWRITER   XMLWriter support                            │ │
│ │   [ ] XSL         XSL support (Implies DOM)                    │ │  
│ │   [ ] YAZ         YAZ support (ANSI/NISO Z39.50)               │ │  
│ │   [ ] ZIP         ZIP support                                  │ │  
│ │   [ ] ZLIB        ZLIB support                                 │ │  
├─└───────v(+)─────────────────────────────────────────────────────┘─┤  
│                       [  OK  ]       Cancel                        │  
└────────────────────────────────────────────────────────────────────┘  
# make configure
┌────────────────────────────────────────────────────────────────────┐
│                    Options for curl 7.19.7_1                       │  
│ ┌────────────────────────────────────────────────────────────────┐ │  
│ │   [ ] CARES        Asynchronous DNS resolution via c-ares      │ │  
│ │   [ ] CURL_DEBUG   Enable curl diagnostic output               │ │  
│ │   [ ] GNUTLS       Use GNU TLS if OPENSSL is OFF               │ │  
│ │   [ ] IPV6         IPv6 support                                │ │  
│ │   [ ] KERBEROS4    Kerberos 4 authentication                   │ │  
│ │   [ ] LDAP         LDAP support                                │ │  
│ │   [ ] LDAPS        LDAPS support (requires LDAP and SSL)       │ │  
│ │   [ ] LIBIDN       Internationalized Domain Names via libidn   │ │  
│ │   [ ] LIBSSH2      SCP/SFTP support via libssh2                │ │  
│ │   [ ] NTLM         NTLM authentication                         │ │  
│ │   [ ] OPENSSL      OpenSSL support                             │ │  
│ │   [ ] PROXY        Proxy support                               │ │  
│ │   [ ] TRACKMEMORY  Enable curl memory diagnostic output        │ │  
│ │                                                                │ │  
│ │                                                                │ │  
├─└────────────────────────────────────────────────────────────────┘─┤  
│                       [  OK  ]       Cancel                        │  
└────────────────────────────────────────────────────────────────────┘
# make
# make install
</code>

В каталоге /usr/local/etc/apache22/Includes создаем файл php.conf с таким содержимым:
<code>
<IfModule mod_php5.c>                                                                                                                                                                                          
AddType application/x-httpd-php .php .phtml .php3                                                                                                                                                              
AddType application/x-httpd-php-source .phps                                                                                                                                                                   
</IfModule>
</code>

Конфигурируем **PHP**:
<code>
mv /usr/local/etc/php.ini-recommended /usr/local/etc/php.ini
</code>
Включаем short_open_tag и display_errors в /usr/local/etc/php.ini
<code>
...
short_open_tag = On
...
display_errors = On
...
</code>

Добавляем в /etc/rc.conf следующие строки:
<code>
mysql_enable="YES"
apache22_enable="YES"
</code>
и запускаем **Apache** и **MySQL**:
<code>
# /usr/local/etc/rc.d/apache22 star
# /usr/local/etc/rc.d/mysql-server start
</code>

Устанавливаем пароль для суперпользователя **MySQL**:
<code>
# mysqladmin password "passwd"
</code>

Протестируем **PHP**. В каталоге /usr/local/www/apache22/data/ создаем файл test.php такого содержания:
<code>
<?
mysql_connect("localhost", "root", "passwd") or die(mysql_error());
echo "Test OK. Connected to MySQL<br />";
?>
</code>
Открываем в браузере адрес http://10.0.15.3/test.php Если мы видим сообщение:
<code>
Fatal error: Call to undefined function mysql_connect() in ...
</code>
значит **PHP** собран без поддержки **MySQL**, либо модуль mysql.so не подгружен. Если мы видим исходный код файла, значит **PHP** собран без поддержки **Apache**, либо не подгружен модуль mod_php.

Мы должны увидеть сообщение:
<code>
Test OK. Connected to MySQL
</code>
либо
<code>
Access denied for user 'root'@'localhost' (using password: YES)
</code>
Значит все работает. Не забываем потом удалить test.php

Итак, к этому моменту мы должны иметь работающую связку **Apache** + **PHP** + **MySQL**.




===== Установка FreeRADIUS + MPD5 =====
Устанавливаем **FreeRADIUS**, обязательно с поддержкой **MySQL**:
<code>
# cd /usr/ports/net/freeradius2
# make config
┌────────────────────────────────────────────────────────────────────┐
│                   Options for freeradius 2.1.6                     │  
│ ┌────────────────────────────────────────────────────────────────┐ │  
│ │[X] USER          Run as user freeradius, group freeradius      │ │  
│ │[ ] KERBEROS      With Kerberos support                         │ │  
│ │[ ] HEIMDAL       With Heimdal Kerberos support                 │ │  
│ │[ ] LDAP          With LDAP database support                    │ │  
│ │[X] MYSQL         With MySQL database support                   │ │  
│ │[ ] PGSQL         With PostgreSQL database support              │ │  
│ │[ ] UNIXODBC      With unixODBC database support                │ │  
│ │[ ] FIREBIRD      With Firebird database support (EXPERIMENTAL) │ │  
│ │[ ] PERL          With Perl support                             │ │  
│ │[ ] PYTHON        With Python support                           │ │  
│ │[ ] OCI8          With Oracle support (currently experimental)  │ │  
│ │[ ] RUBY          With Ruby support (EXPERIMENTAL)              │ │  
│ │[ ] DHCP          With DHCP support (EXPERIMENTAL)              │ │  
│ │[ ] EXPERIMENTAL  Build experimental modules                    │ │  
│ │                                                                │ │  
├─└────────────────────────────────────────────────────────────────┘─┤  
│                       [  OK  ]       Cancel                        │
└────────────────────────────────────────────────────────────────────┘
# make configure
# make
# make install
</code>

Устанавливаем **MPD**, включаем NG_IPACCT:
<code>
# cd /usr/ports/net/mpd5
# make config
┌────────────────────────────────────────────────────────────────────┐
│                       Options for mpd 5.3                          │  
│ ┌────────────────────────────────────────────────────────────────┐ │  
│ │ [ ] NG_CAR     Use ng_car kernel module from port (< 7.0 only) │ │  
│ │ [X] NG_IPACCT  Use ng_ipacct kernel module from port           │ │  
│ │                                                                │ │  
│ │                                                                │ │  
├─└────────────────────────────────────────────────────────────────┘─┤  
│                       [  OK  ]       Cancel                        │  
└────────────────────────────────────────────────────────────────────┘ 
# make
# make install
</code>
<note>
Если при выполнении команды make configure вы увидели такую ошибку:
<code>
Warning: Object directory not changed from original /usr/ports/net-mgmt/ng_ipacct/work/ng_ipacct/ipacctctl
cc -O2 -pipe -DMEM_USE_ZONE -fno-strict-aliasing  -g -Wall -Wformat -std=gnu99 -fstack-protector  -c ipacctctl.c
ipacctctl.c:146: error: 'NG_PATHLEN' undeclared here (not in a function)
ipacctctl.c: In function 'ip_account_get_info':
ipacctctl.c:505: warning: unused variable 'path'
ipacctctl.c: In function 'ip_account_show':
ipacctctl.c:602: warning: unused variable 'path'
*** Error code 1
</code>
редактируем файл /usr/ports/net-mgmt/ng_ipacct/work/ng_ipacct/ipacctctl/ipacctctl.c в 146, 505 и 602 строках меняете NG_PATHLEN на NG_PATHSIZ и заново выполняем команду make configure.
</note>

==== Настройка FreeRADIUS ====

==== Настройка MPD5 ====

